#include <stdio.h>

// Definições de constantes para facilitar a leitura do código
#define TAM_TABULEIRO 10   // Tamanho fixo do tabuleiro (10 linhas x 10 colunas)
#define TAM_NAVIO 3        // Tamanho fixo de cada navio (3 posições)

// Função que preenche todo o tabuleiro com 0 (representando água)
void inicializarTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    for (int i = 0; i < TAM_TABULEIRO; i++) {        // percorre cada linha
        for (int j = 0; j < TAM_TABULEIRO; j++) {    // percorre cada coluna
            tabuleiro[i][j] = 0; // coloca 0 (água) em cada posição
        }
    }
}

// Função que imprime o tabuleiro na tela
void exibirTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    printf("\n=== TABULEIRO BATALHA NAVAL ===\n\n");

    for (int i = 0; i < TAM_TABULEIRO; i++) {        // percorre linhas
        for (int j = 0; j < TAM_TABULEIRO; j++) {    // percorre colunas
            printf("%d ", tabuleiro[i][j]); // imprime cada posição com espaço
        }
        printf("\n"); // quebra de linha no final de cada linha
    }
}

// Função que posiciona um navio na horizontal
// Retorna 1 (verdadeiro) se conseguiu posicionar, ou 0 (falso) se não conseguiu
int posicionarNavioHorizontal(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linha, int coluna) {
    // 1. Verifica se o navio cabe dentro do tabuleiro (não pode ultrapassar borda)
    if (coluna + TAM_NAVIO > TAM_TABULEIRO) {
        return 0; // erro: navio não cabe
    }

    // 2. Verifica se já existe outro navio nas posições desejadas
    for (int j = 0; j < TAM_NAVIO; j++) {
        if (tabuleiro[linha][coluna + j] != 0) {
            return 0; // erro: já tem algo no caminho
        }
    }

    // 3. Coloca o navio no tabuleiro (representado pelo número 3)
    for (int j = 0; j < TAM_NAVIO; j++) {
        tabuleiro[linha][coluna + j] = 3;
    }

    return 1; // sucesso
}

// Função que posiciona um navio na vertical
int posicionarNavioVertical(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linha, int coluna) {
    // 1. Verifica se o navio cabe dentro do tabuleiro
    if (linha + TAM_NAVIO > TAM_TABULEIRO) {
        return 0; // erro: navio não cabe
    }

    // 2. Verifica se já existe outro navio nas posições desejadas
    for (int i = 0; i < TAM_NAVIO; i++) {
        if (tabuleiro[linha + i][coluna] != 0) {
            return 0; // erro: já tem algo no caminho
        }
    }

    // 3. Coloca o navio no tabuleiro
    for (int i = 0; i < TAM_NAVIO; i++) {
        tabuleiro[linha + i][coluna] = 3;
    }

    return 1; // sucesso
}

int main() {
    // Declaração do tabuleiro 10x10
    int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO];

    // Inicializa todas as posições com 0 (água)
    inicializarTabuleiro(tabuleiro);

    // ===============================
    // Escolha das posições dos navios
    // ===============================
    // Para simplificação, as posições estão fixadas no código
    // Você pode mudar os valores abaixo para testar outros locais

    int linhaNavio1 = 2, colunaNavio1 = 4; // navio horizontal (linha 2, colunas 4-6)
    int linhaNavio2 = 5, colunaNavio2 = 7; // navio vertical (coluna 7, linhas 5-7)

    // Tentativa de posicionar o navio horizontal
    if (!posicionarNavioHorizontal(tabuleiro, linhaNavio1, colunaNavio1)) {
        printf("Erro ao posicionar o navio horizontal!\n");
    }

    // Tentativa de posicionar o navio vertical
    if (!posicionarNavioVertical(tabuleiro, linhaNavio2, colunaNavio2)) {
        printf("Erro ao posicionar o navio vertical!\n");
    }

    // Exibe o tabuleiro final com os navios
    exibirTabuleiro(tabuleiro);

    return 0;
}
